<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>carreyWang的博客空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangc1993.github.io/"/>
  <updated>2019-07-03T02:51:36.187Z</updated>
  <id>https://wangc1993.github.io/</id>
  
  <author>
    <name>Carrey Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无限级分类</title>
    <link href="https://wangc1993.github.io/2019/07/03/21/"/>
    <id>https://wangc1993.github.io/2019/07/03/21/</id>
    <published>2019-07-03T01:41:25.000Z</published>
    <updated>2019-07-03T02:51:36.187Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>前情提要：</em></strong>当我们在做一些商城网站的时候，往往会有一种分类，叫做无限级分类，即：父类下面包含子类，子类又作为父类包含子类，以此类推。如下图所示（淘宝官网）。</p><div align="center"><img src="/2019/07/03/21/1.png"></div><h1 id="原始数据的获取（一般都是从数据库取出）"><a href="#原始数据的获取（一般都是从数据库取出）" class="headerlink" title="原始数据的获取（一般都是从数据库取出）"></a>原始数据的获取（一般都是从数据库取出）</h1><h3 id="假设获取的数据为："><a href="#假设获取的数据为：" class="headerlink" title="假设获取的数据为："></a>假设获取的数据为：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"手机数码"</span>,<span class="string">"pid"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"name"</span>:<span class="string">"家用电器"</span>,<span class="string">"pid"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"name"</span>:<span class="string">"美妆护肤"</span>,<span class="string">"pid"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"name"</span>:<span class="string">"钟表珠宝"</span>,<span class="string">"pid"</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">16</span>,<span class="string">"name"</span>:<span class="string">"小米"</span>,<span class="string">"pid"</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">17</span>,<span class="string">"name"</span>:<span class="string">"华为"</span>,<span class="string">"pid"</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">18</span>,<span class="string">"name"</span>:<span class="string">"卡西欧"</span>,<span class="string">"pid"</span>:<span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">19</span>,<span class="string">"name"</span>:<span class="string">"魅族"</span>,<span class="string">"pid"</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">21</span>,<span class="string">"name"</span>:<span class="string">"美的"</span>,<span class="string">"pid"</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"id"</span>:<span class="number">24</span>,<span class="string">"name"</span>:<span class="string">"红米"</span>,<span class="string">"pid"</span>:<span class="number">16</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="具体的分类代码"><a href="#具体的分类代码" class="headerlink" title="具体的分类代码"></a>具体的分类代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*首先将每个数据转化成对象的形式(方便寻找父级)*/</span></span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        map[item.id] = item;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/*分类*/</span></span><br><span class="line">    <span class="keyword">let</span> cate = [];</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parent = map[item.pid];</span><br><span class="line">        <span class="keyword">if</span>(parent)&#123;</span><br><span class="line">            (parent.children || (parent.children = [])).push(item);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cate.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> cate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出分类数组"><a href="#输出分类数组" class="headerlink" title="输出分类数组"></a>输出分类数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"手机数码"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"children"</span>: [&#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">16</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"小米"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"children"</span>: [&#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">24</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"红米"</span>,</span><br><span class="line">            <span class="string">"pid"</span>: <span class="number">16</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"华为"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"魅族"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"家用电器"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"children"</span>: [&#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"美的"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">2</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"美妆护肤"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: <span class="number">0</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"钟表珠宝"</span>,</span><br><span class="line">    <span class="string">"pid"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"children"</span>: [&#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"卡西欧"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: <span class="number">4</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;前情提要：&lt;/em&gt;&lt;/strong&gt;当我们在做一些商城网站的时候，往往会有一种分类，叫做无限级分类，即：父类下面包含子类，子类又作为父类包含子类，以此类推。如下图所示（淘宝官网）。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=
      
    
    </summary>
    
      <category term="js无限级分类" scheme="https://wangc1993.github.io/categories/js%E6%97%A0%E9%99%90%E7%BA%A7%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="js" scheme="https://wangc1993.github.io/tags/js/"/>
    
      <category term="分类" scheme="https://wangc1993.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之K最近邻算法</title>
    <link href="https://wangc1993.github.io/2019/01/22/20/"/>
    <id>https://wangc1993.github.io/2019/01/22/20/</id>
    <published>2019-01-22T04:51:51.000Z</published>
    <updated>2019-01-22T06:39:32.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="橙子还是柚子"><a href="#橙子还是柚子" class="headerlink" title="橙子还是柚子"></a>橙子还是柚子</h1><h1 id="推荐系统（余弦相识度）"><a href="#推荐系统（余弦相识度）" class="headerlink" title="推荐系统（余弦相识度）"></a>推荐系统（余弦相识度）</h1><p>2.1、特征提取<br>2.2、回归<br>2.3、挑选合适特征</p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>3.1、OCR光学字符识别<br>3.2、创建垃圾邮箱过滤器（算法：朴素贝叶斯分类器）<br>3.3、预测股票市场</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;橙子还是柚子&quot;&gt;&lt;a href=&quot;#橙子还是柚子&quot; class=&quot;headerlink&quot; title=&quot;橙子还是柚子&quot;&gt;&lt;/a&gt;橙子还是柚子&lt;/h1&gt;&lt;h1 id=&quot;推荐系统（余弦相识度）&quot;&gt;&lt;a href=&quot;#推荐系统（余弦相识度）&quot; class=&quot;header
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="K最近邻算法" scheme="https://wangc1993.github.io/tags/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之动态规划</title>
    <link href="https://wangc1993.github.io/2019/01/22/19/"/>
    <id>https://wangc1993.github.io/2019/01/22/19/</id>
    <published>2019-01-22T02:45:04.000Z</published>
    <updated>2019-01-22T04:51:40.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。<strong>但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用。</strong></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ol><li>背包问题</li><li>最长公共子串<br> 2.1、绘制网格<br> 2.2、填充网格<br> 2.3、最长公共子序列（比较的是最长公共子串） <div align="center"><img src="/2019/01/22/19/1.png"></div><br> 2.4、最长公共子序列之解决方案（计算最长公共子序列）<br> <div align="center"><img src="/2019/01/22/19/2.png"></div></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>具体的后期补充，先留一个位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。&lt;strong&gt;但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://wangc1993.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之贪婪算法</title>
    <link href="https://wangc1993.github.io/2019/01/22/18/"/>
    <id>https://wangc1993.github.io/2019/01/22/18/</id>
    <published>2019-01-22T02:03:50.000Z</published>
    <updated>2019-01-22T02:13:03.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>（1）教室调度问题<br>（2）背包问题（装东西）<br>（3）集合覆盖问题（代码实现）<br>（4）NP完全问题（多项式复杂程度的非确定性问题，是世界七大数学难题之一）<br>那么如何判断问题是不是NP问题：（没有办法，下面提供有效分析）</p><blockquote><p>  元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。<br>    涉及“所有组合”的问题通常是NP完全问题。<br>    不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。<br>    如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题<br>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。<br>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>针对上面的集合覆盖问题（具体的问题可参考算法图解）进行的代码实现：</p><div align="center"><img src="/2019/01/22/18/1.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h1&gt;&lt;p&gt;（1）教室调度问题&lt;br&gt;（2）背包问题（装东西）&lt;br&gt;（3）集合覆盖问题（代码实现）&lt;br&gt;（4）NP完全问题（多项式复杂程度的非确定性
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪婪算法" scheme="https://wangc1993.github.io/tags/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之狄克斯特拉算法</title>
    <link href="https://wangc1993.github.io/2019/01/21/17/"/>
    <id>https://wangc1993.github.io/2019/01/21/17/</id>
    <published>2019-01-21T02:44:06.000Z</published>
    <updated>2019-01-21T06:58:54.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>要找出最快的路径。</p><h1 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h1><p>下面来看看能否找到耗时更短的路径！狄克斯特拉算法包含4个步骤：<br>(1) 找出“最便宜”的节点，即可在最短时间内到达的节点。<br>(2) 更新该节点的邻居的开销，其含义将稍后介绍。<br>(3) 重复这个过程，直到对图中的每个节点都这样做了。<br>(4) 计算最终路径。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li><strong>找出最便宜的节点。</strong>你站在起点，不知道该前往节点A还是前往节点B。前往这两个节点都要多长时间呢？前往节点A需要6分钟，而前往节点B需要2分钟。至于前往其他节点，你还不知道需要多长时间。由于你还不知道前往终点需要多长时间，因此你假设为无穷大（这样做的原因你马上就会明白）。节点B是最近的——2分钟就能达到。<div style="display: flex; justify-content: center;"><img src="/2019/01/21/17/1.png" width="250"><img src="/2019/01/21/17/2.png" width="250"></div></li><li><strong>计算经节点B前往其各个邻居所需的时间。</strong>你刚找到了一条前往节点A的更短路径！直接前往节点A需要6分钟。但经由节点B前往节点A只需5分钟！对于节点B的邻居，如果找到前往它的更短路径，就更新其开销。在这里，你找到了：<br> 1）前往节点A的更短路径（时间从6分钟缩短到5分钟）；<br> 2）前往终点的更短路径（时间从无穷大缩短到7分钟）。 <div align="center"><img src="/2019/01/21/17/3.png"></div></li><li>重复上述步骤：<br>重复第一步 ：找出可在最短时间内前往的节点。你对节点B执行了第二步，除节点B外，可在最短时间内前往的节点是节点A。重复第二步 ：更新节点A的所有邻居的开销。你发现前往终点的时间为6分钟！你对每个节点都运行了狄克斯特拉算法（无需对终点这样做）。现在，你知道：<br> 1）前往节点B需要2分钟；<br> 2）前往节点A需要5分钟；<br> 3）前往终点需要6分钟。<div align="center" style="display: flex;"><img src="/2019/01/21/17/4.png"><img src="/2019/01/21/17/5.png"></div></li></ol><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>在算法图解中有个换钢琴的案例。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><div style="display: flex; justify-content: center;"><img src="/2019/01/21/17/6.png"><img src="/2019/01/21/17/7.png"></div><br><div style="display: flex; justify-content: center;"><img src="/2019/01/21/17/8.png"><img src="/2019/01/21/17/9.png"></div><br><div style="display: flex; justify-content: center;"><img src="/2019/01/21/17/10.png"><img src="/2019/01/21/17/11.png"></div><br><div align="center"><img src="/2019/01/21/17/12.png"></div><br><div align="center"><img src="/2019/01/21/17/13.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h1&gt;&lt;p&gt;要找出最快的路径。&lt;/p&gt;
&lt;h1 id=&quot;狄克斯特拉算法&quot;&gt;&lt;a href=&quot;#狄克斯特拉算法&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="狄克斯特拉算法" scheme="https://wangc1993.github.io/tags/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之广度优先搜索</title>
    <link href="https://wangc1993.github.io/2019/01/20/16/"/>
    <id>https://wangc1993.github.io/2019/01/20/16/</id>
    <published>2019-01-20T13:23:58.000Z</published>
    <updated>2019-01-20T14:01:44.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>广度优先搜索是一种用于图的查找算法，可帮助回答两类问题：<br>第一类问题：从节点A出发，有前往节点B的路径吗？<br>第二类问题：从节点A出发，前往节点B的哪条路径最短？</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ol><li><strong>在你的人际关系网中，有芒果销售商吗？</strong><br><div align="center"><img src="/2019/01/20/16/1.png"></div><br>假设你经营着一个芒果农场，需要寻找芒果销售商，以便将芒果卖给他。在Facebook，你与芒果销售商有联系吗？为此，你可在朋友中查找。这种查找很简单。首先，创建一个朋友名单。然后，依次检查名单中的每个人，看看他是否是芒果销售商。假设你没有朋友是芒果销售商，那么你就必须在朋友的朋友中查找。检查名单中的每个人时，你都将其朋友加入名单。这样一来，你不仅在朋友中查找，还在朋友的朋友中查找。别忘了，你的目标是在你的人际关系网中找到一位芒果销售商。因此，如果Alice不是芒果销售商，就将其朋友也加入到名单中。这意味着你将在她的朋友、朋友的朋友等中查找。使用这种算法将搜遍你的整个人际关系网，直到找到芒果销售商。这就是广度优先搜索算法。</li><li><strong>哪个芒果销售商与你的关系最近？</strong><br><div align="center"><img src="/2019/01/20/16/2.png"></div><br>例如，朋友是一度关系，朋友的朋友是二度关系。在你看来，一度关系胜过二度关系，二度关系胜过三度关系，以此类推。因此，你应先在一度关系中搜索，确定其中没有芒果销售商后，才在二度关系中搜索。广度优先搜索就是这样做的！在广度优先搜索的执行过程中，搜索范围从起点开始逐渐向外延伸，即先检查一度关系，再检查二度关系。顺便问一句：将先检查Claire还是Anuj呢？Claire是一度关系，而Anuj是二度关系，因此将先检查Claire，后检查Anuj。你也可以这样看，一度关系在二度关系之前加入查找名单。你按顺序依次检查名单中的每个人，看看他是否是芒果销售商。这将先在一度关系中查找，再在二度关系中查找，因此找到的是关系最近的芒果销售商。广度优先搜索不仅查找从A到B的路径，而且找到的是最短的路径。<br><div align="center"><img src="/2019/01/20/16/3.png"></div><br>注意，只有按添加顺序查找时，才能实现这样的目的。换句话说，如果Claire先于Anuj加入名单，就需要先检查Claire，再检查Anuj。如果Claire和Anuj都是芒果销售商，而你先检查Anuj再检查Claire，结果将如何呢？找到的芒果销售商并非是与你关系最近的，因为Anuj是你朋友的朋友，而Claire是你的朋友。因此，你需要按添加顺序进行检查。有一<br>个可实现这种目的的数据结构，那就是队列 （queue）。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><div align="center"><img src="/2019/01/20/16/4.png"></div><br><div align="center"><img src="/2019/01/20/16/5.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;广度优先搜索是一种用于图的查找算法，可帮助回答两类问题：&lt;br&gt;第一类问题：从节点A出发，有前往节点B的路径吗？&lt;br&gt;第二类问题：从节点A
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="广度优先搜索" scheme="https://wangc1993.github.io/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之散列表</title>
    <link href="https://wangc1993.github.io/2019/01/19/15/"/>
    <id>https://wangc1993.github.io/2019/01/19/15/</id>
    <published>2019-01-19T07:09:01.000Z</published>
    <updated>2019-01-19T07:18:53.537Z</updated>
    
    <content type="html"><![CDATA[<p>数组和链表都被直接映射到内存，但散列表更复杂，它使用散列函数来确定元素的存储位置。在你将学习的复杂数据结构中，散列表可能是最有用的，也被称为散列映射、映射、字典和关联数组。</p><p>散列表的<strong>速度很快</strong>。你可以立即获取数组中的元素，而散列表也使用数组来存储数据，因此其获取元素的速度与数组一样快。<br>你可能根本不需要自己去实现散列表，<strong>任一优秀的语言都提供了散列表实现</strong>。Python提供的散列表实现为字典，你可使用函数dict来创建散列表。</p><p>总结一下，散列表适合用于：</p><ol><li>模拟<strong>映射关系</strong>；</li><li><strong>防止重复</strong>；</li><li><strong>缓存/记住数据</strong>，以免服务器再通过处理来生成它们。</li></ol><p><strong>冲突：两个键映射到同一个位置。</strong><br>最简单的办法如下：如果两个键映射到了同一个位置，就在这个位置存储一个链表。但是当要存储的键都是以a开头，那么会导致只有一个位置上有值，且这个链表会很长，散列表的速度回很慢。</p><p>引出：</p><ol><li>散列函数很重要。前面的散列函数将所有的键都映射到一个位置，而最理想的情况是，散列函数将键均匀地映射到散列表的不同位置。</li><li>如果散列表存储的链表很长，散列表的速度将急剧下降。然而，如果使用的散列函数很好，这些链表就不会很长！</li></ol><p>性能：<strong>需要避免冲突</strong>。<br>方法：较低的填装因子；良好的散列函数。（一旦填装因子超过0.7，就该调整散列表的长度。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组和链表都被直接映射到内存，但散列表更复杂，它使用散列函数来确定元素的存储位置。在你将学习的复杂数据结构中，散列表可能是最有用的，也被称为散列映射、映射、字典和关联数组。&lt;/p&gt;
&lt;p&gt;散列表的&lt;strong&gt;速度很快&lt;/strong&gt;。你可以立即获取数组中的元素，而散列
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>算法图解之快排</title>
    <link href="https://wangc1993.github.io/2019/01/19/14/"/>
    <id>https://wangc1993.github.io/2019/01/19/14/</id>
    <published>2019-01-19T06:18:57.000Z</published>
    <updated>2019-01-19T07:05:13.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D-amp-C算法"><a href="#D-amp-C算法" class="headerlink" title="D&amp;C算法"></a>D&amp;C算法</h1><p>在讲快排之前首先需要先介绍一下D&amp;C算法。D&amp;C（divide and conquer），分而治之，一种著名的递归式问题解决方法。下面从几个例子来了解一下：</p><ol><li>假设你是农场主，有一小块（1680m*640m）土地。你要将这块地均匀地分成方块，且分出的方块要尽可能大。如何将一块地均匀地分成方块，并确保分出的方块是最大的呢？使用D&amp;C策略！D&amp;C算法是递归的。使用D&amp;C解决问题的过程包括两个步骤：<br> （1）找出基线条件，这种条件必须尽可能简单。<br> （2）不断将问题分解（或者说缩小规模），直到符合基线条件。</li></ol><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序也使用了D&amp;C。它的实现原理：以一个为基准，将数组分为两部分，再依次将拆分的部分再进行取基准、分组，以此类推。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><div align="center"><img src="/2019/01/19/14/1.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;D-amp-C算法&quot;&gt;&lt;a href=&quot;#D-amp-C算法&quot; class=&quot;headerlink&quot; title=&quot;D&amp;amp;C算法&quot;&gt;&lt;/a&gt;D&amp;amp;C算法&lt;/h1&gt;&lt;p&gt;在讲快排之前首先需要先介绍一下D&amp;amp;C算法。D&amp;amp;C（divide an
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="https://wangc1993.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之递归</title>
    <link href="https://wangc1993.github.io/2019/01/18/13/"/>
    <id>https://wangc1993.github.io/2019/01/18/13/</id>
    <published>2019-01-18T02:22:41.000Z</published>
    <updated>2019-01-18T02:55:05.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h1><p>假设你在祖母的阁楼中翻箱倒柜，发现了一个上锁的神秘手提箱。祖母告诉你，钥匙很可能在下面这个盒子里。你如何找到它：</p><div align="center"><img src="/2019/01/18/13/1.png"></div><p>(1)检查盒子中的每样东西。<br>(2)如果是盒子，就回到第一步。<br>(3)如果是钥匙，就大功告成！<br>递归只是让解决方案更清晰，并没有性能上的优势。实际上，在有些情况下，使用循环的性能更好。</p><h1 id="递归条件"><a href="#递归条件" class="headerlink" title="递归条件"></a>递归条件</h1><p>每个递归函数都有两部分：基线条件 （base case）和递归条件 （recursive<br>case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p><div align="center"><img src="/2019/01/18/13/2.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是递归&quot;&gt;&lt;a href=&quot;#什么是递归&quot; class=&quot;headerlink&quot; title=&quot;什么是递归&quot;&gt;&lt;/a&gt;什么是递归&lt;/h1&gt;&lt;p&gt;假设你在祖母的阁楼中翻箱倒柜，发现了一个上锁的神秘手提箱。祖母告诉你，钥匙很可能在下面这个盒子里。你如何找到它：&lt;/
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://wangc1993.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之选择排序</title>
    <link href="https://wangc1993.github.io/2019/01/18/12/"/>
    <id>https://wangc1993.github.io/2019/01/18/12/</id>
    <published>2019-01-18T02:10:59.000Z</published>
    <updated>2019-01-18T02:23:50.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>每次选出最小/最大的，放到一个新数组中，接着继续寻找剩下的元素中的最小的，以此类推。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><div align="center"><img src="/2019/01/18/12/1.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a&gt;实现方式&lt;/h1&gt;&lt;p&gt;每次选出最小/最大的，放到一个新数组中，接着继续寻找剩下的元素中的最小的，以此类推。&lt;/p&gt;
&lt;h1 id=&quot;代码实现&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="选择排序" scheme="https://wangc1993.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法图解之二分查找</title>
    <link href="https://wangc1993.github.io/2019/01/17/11/"/>
    <id>https://wangc1993.github.io/2019/01/17/11/</id>
    <published>2019-01-17T07:38:11.000Z</published>
    <updated>2019-01-17T08:31:52.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是二分查找"><a href="#什么是二分查找" class="headerlink" title="什么是二分查找"></a>什么是二分查找</h1><p>首先我们通过以下假设来了解一下：</p><ol><li>假设要在电话簿中找一个名字以K打头的人，（现在谁还用电话簿！）可以从头开始翻页，直到进入以K打头的部分。但你很可能不这样做，而是从中间开始，因为你知道以K打头的名字在电话簿中间。</li><li>假设你登录Facebook。当你这样做时，Facebook必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为karlmageddon，Facebook可从以A打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。</li></ol><p>这是一个<strong>查找问题</strong>，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是<strong>二分查找</strong> 。二分查找是一种算法，其输入是一个<strong>有序的元素列表</strong>。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回null。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>下面的示例说明了二分查找的工作原理。随便想一个1～100的数字。你的目标是以最少的次数猜到这个数字。我们跳过傻找的方式，直接进入二分查找：50》25》13》7》4》2》1。不管我心里想的是哪个数字，你在7次之内都能猜到，因为每次猜测都将排除很多数字！！一般而言，对于包含n 个元素的列表，用二分查找最多需要<strong>log2n</strong>步，而简单查找最多需要n步。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面来看看如何编写执行二分查找的Js代码：</p><ol><li>函数binary_search接受一个有序数组和一个元素。如果指定的元素包含在数组中，这个函数将返回其位置。你将跟踪要在其中查找的数组部分——开始时为整个数组。</li><li>每次都检查中间的元素：<strong>mid = (low + high) / 2</strong> ←—如果(low + high)不是偶数，向下取整。</li><li>如果猜的数字小了，就相应地修改low：<strong>low = mid + 1</strong>。如果猜的数字大了，就修改high：<strong>high = mid - 1</strong>。</li></ol><p>下面是具体的实现代码：</p><div align="center"><img src="/2019/01/17/11/1.png"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是二分查找&quot;&gt;&lt;a href=&quot;#什么是二分查找&quot; class=&quot;headerlink&quot; title=&quot;什么是二分查找&quot;&gt;&lt;/a&gt;什么是二分查找&lt;/h1&gt;&lt;p&gt;首先我们通过以下假设来了解一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设要在电话簿中找一个名字以K打头的人，
      
    
    </summary>
    
      <category term="算法图解" scheme="https://wangc1993.github.io/categories/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="https://wangc1993.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分查找" scheme="https://wangc1993.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-NexT添加热度、阅读量排行</title>
    <link href="https://wangc1993.github.io/2019/01/12/10/"/>
    <id>https://wangc1993.github.io/2019/01/12/10/</id>
    <published>2019-01-12T11:08:28.000Z</published>
    <updated>2019-01-12T12:01:55.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeanCloud注册"><a href="#LeanCloud注册" class="headerlink" title="LeanCloud注册"></a>LeanCloud注册</h1><blockquote><p>去<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>进行注册（支持第三方登录），创建一个新应用，点击新建应用，点击存储，新建一个class，<strong>class名一定要是Counter</strong>，其他默认就好，否则会报错哦（next默认）：</p></blockquote><p><div align="center"><img src="/2019/01/12/10/1.png"></div></p><h1 id="添加ID和KEY"><a href="#添加ID和KEY" class="headerlink" title="添加ID和KEY"></a>添加ID和KEY</h1><blockquote><p>点击设置到应用Key，复制app id与app key，打开主题配置文件<strong>_config.yml</strong>，搜索leancloud_visitors，进行如下设置：</p></blockquote><p><div align="center"><img src="/2019/01/12/10/2.png"></div></p><p><div align="center"><img src="/2019/01/12/10/3.png"></div><br>接着，打开<strong>/themes/next/languages/zh-Hans.yml</strong>，搜索visitors，将阅读次数改为当前热度即可。最后打开<strong>/themes/next/layout/_macro/post.swig</strong>，搜索<strong>leancloud-visitors-count</strong>，在其后增加如下代码：</p><p><div align="center"><img src="/2019/01/12/10/3.png"></div></p><h1 id="新增热度排行页面"><a href="#新增热度排行页面" class="headerlink" title="新增热度排行页面"></a>新增热度排行页面</h1><ol><li>新建页面,首先执行：<code>hexo n page hot</code>新建一个hot页面，编辑其中自动生成的 index.md 文件，将其中的代码替换如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;hot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(&quot;leancloud_appid&quot;, &quot;leancloud_appkey&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var time=0</span><br><span class="line">  var title=&quot;&quot;</span><br><span class="line">  var url=&quot;&quot;</span><br><span class="line">  var query = new AV.Query(&apos;Counter&apos;);</span><br><span class="line">  query.notEqualTo(&apos;id&apos;,0);</span><br><span class="line">  query.descending(&apos;time&apos;);</span><br><span class="line">  query.limit(1000);</span><br><span class="line">  query.find().then(function (todo) &#123;</span><br><span class="line">    for (var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">      var result=todo[i].attributes;</span><br><span class="line">      time=result.time;</span><br><span class="line">      title=result.title;</span><br><span class="line">      url=result.url;</span><br><span class="line">      var content=&quot;&lt;p&gt;&quot;+&quot;&lt;font color=&apos;#1C1C1C&apos;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;/font&gt;&quot;+&quot;&lt;a href=&apos;&quot;+&quot;https://wangc1993.github.io/&quot;+url+&quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;/p&gt;&quot;;</span><br><span class="line">      document.getElementById(&quot;hot&quot;).innerHTML+=content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    console.log(&quot;error&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p>并将其中的<strong>leancloud_appid</strong>、<strong>leancloud_appkey</strong>和<strong>页面地址</strong>替换为你的。</p><ol start="2"><li>配置主题，同样打开<strong>themes\next_config.yml</strong>，搜索menu，添加<strong>hot: /hot/ || signal</strong>。</li><li>配置其中文对应，打开<strong>hexo/theme/next/languages/zh-Hans.yml</strong>，搜索menu，添加<strong>hot: 热度排行</strong>。</li></ol><h1 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h1><blockquote><p>回到<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>后台，点击设置，到安全中心，添加安全域名，就是你博客的域名，这是为了在本地测试的时候不影响热度。大功告成！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeanCloud注册&quot;&gt;&lt;a href=&quot;#LeanCloud注册&quot; class=&quot;headerlink&quot; title=&quot;LeanCloud注册&quot;&gt;&lt;/a&gt;LeanCloud注册&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;去&lt;a href=&quot;https://lea
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT添加gitment评论</title>
    <link href="https://wangc1993.github.io/2019/01/11/9/"/>
    <id>https://wangc1993.github.io/2019/01/11/9/</id>
    <published>2019-01-11T11:57:29.000Z</published>
    <updated>2019-01-11T12:20:26.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a>注册OAuth Application</h1><blockquote><p>登录自己的github账号，注册<a href="https://github.com/settings/developers" target="_blank" rel="noopener">OAuth Application</a></p></blockquote><p><div align="center"><img src="/2019/01/11/9/1.png"></div><br>下面是我建的app。点击<strong>new OAuth app</strong>，如下进行设置：</p><p><div align="center"><img src="/2019/01/11/9/2.png"></div><br><strong>注意：</strong></p><blockquote><p>1.要确保填入正确的 callback URL（一般是网站的域名)<br>2.你会得到一个client ID和一个client secret，这个将被用于之后的用户登录。</p></blockquote><h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><blockquote><p>搜索gitment，进行相关配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: true # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class="line">  language: zh-Hans # Force language, or auto switch by theme</span><br><span class="line">  github_user: wangc1993 # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: gitment-blog # MUST HAVE, The repo you use to store Gitment comments</span><br><span class="line">  client_id: client ID # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: client secret # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注册OAuth-Application&quot;&gt;&lt;a href=&quot;#注册OAuth-Application&quot; class=&quot;headerlink&quot; title=&quot;注册OAuth Application&quot;&gt;&lt;/a&gt;注册OAuth Application&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT配置百度分享</title>
    <link href="https://wangc1993.github.io/2019/01/10/8/"/>
    <id>https://wangc1993.github.io/2019/01/10/8/</id>
    <published>2019-01-10T12:42:02.000Z</published>
    <updated>2019-01-10T12:51:28.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><blockquote><p>将主题配置_config.yml文件中关于baidushare部分的内容改为（其中type亦可以选择button，但是选择button时，死活就是没效果，不知道为什么，知道原因的评论处交流一下）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baidushare:</span><br><span class="line">  type: slide</span><br><span class="line">  baidushare: true</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>注意：</strong></p><blockquote><p>_config.yml中提示：<strong>Warning: Baidu Share does not support https.</strong>，所以当你部署到https服务器上时，会无效，本地有效。</p></blockquote><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><blockquote><ol><li>在当前<a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">链接</a>下载压缩包到本地，解压后，将static文件夹保存至<strong>themes\next\source</strong>目录下。</li><li>打开文件<strong>themes\next\layout_partials\share\baidushare.swig</strong>，将<strong>//bdimg.share.baidu.com</strong>删除即可。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置-config-yml&quot;&gt;&lt;a href=&quot;#配置-config-yml&quot; class=&quot;headerlink&quot; title=&quot;配置_config.yml&quot;&gt;&lt;/a&gt;配置_config.yml&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将主题配置_config.
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT加入动态背景</title>
    <link href="https://wangc1993.github.io/2019/01/10/7/"/>
    <id>https://wangc1993.github.io/2019/01/10/7/</id>
    <published>2019-01-10T10:52:49.000Z</published>
    <updated>2019-01-11T11:06:19.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h1><blockquote><p>在<strong>themes\next\source\js\src</strong>中新建文件<strong>dynamic_bg.js</strong>，代码<a href="https://github.com/wangc1993/wangc1993.github.io/tree/master/js/src/dynamic_bg.js" target="_blank" rel="noopener">链接</a>。</p></blockquote><h1 id="添加引入文件"><a href="#添加引入文件" class="headerlink" title="添加引入文件"></a>添加引入文件</h1><blockquote><p>打开<strong>themes\next\layout_layout.swig</strong>文件，在body里添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;bg_content&quot;&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>末尾继续添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/dynamic_bg.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h1 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h1><blockquote><p>在<strong>themes\next\source\css_custom\custom.styl</strong>文件末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.bg_content &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: -1;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>在next5.1.1以后，已经自带了两种背景动画，打开配置文件，搜索three_waves：将false改为true即可。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新建文件&quot;&gt;&lt;a href=&quot;#新建文件&quot; class=&quot;headerlink&quot; title=&quot;新建文件&quot;&gt;&lt;/a&gt;新建文件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在&lt;strong&gt;themes\next\source\js\src&lt;/strong&gt;中新建文件&lt;
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT给文章添加结束语</title>
    <link href="https://wangc1993.github.io/2019/01/10/6/"/>
    <id>https://wangc1993.github.io/2019/01/10/6/</id>
    <published>2019-01-10T09:54:56.000Z</published>
    <updated>2019-01-10T10:37:01.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建end-tag"><a href="#新建end-tag" class="headerlink" title="新建end-tag"></a>新建end-tag</h1><blockquote><p>打开<strong>\themes\next\layout_macro</strong>，新建<strong>passage-end-tag.swig</strong>文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-----------------------&lt;span style=&quot;margin: 0 10px;&quot;&gt;本文结束&lt;/span&gt;&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;&lt;span style=&quot;margin: 0 10px;&quot;&gt;感谢您的阅读&lt;/span&gt;-----------------------&lt;/div&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="修改post-swig"><a href="#修改post-swig" class="headerlink" title="修改post.swig"></a>修改post.swig</h1><blockquote><p>打开<strong>\themes\next\layout_macro\post.swig</strong>文件，在<strong>post-body</strong>后，<strong>post-footer</strong>前，添加下面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h1><blockquote><p>在<strong>_config.yml</strong>末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新建end-tag&quot;&gt;&lt;a href=&quot;#新建end-tag&quot; class=&quot;headerlink&quot; title=&quot;新建end-tag&quot;&gt;&lt;/a&gt;新建end-tag&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;打开&lt;strong&gt;\themes\next\layout
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-NexT接入网页在线联系功能</title>
    <link href="https://wangc1993.github.io/2019/01/10/5/"/>
    <id>https://wangc1993.github.io/2019/01/10/5/</id>
    <published>2019-01-10T08:16:11.000Z</published>
    <updated>2019-01-10T08:33:29.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><blockquote><p>首先在<a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>注册个账号，支持github、微信注册，开启DaoVoice之旅，邀请码是1e963cbc，点击创建。</p></blockquote><div align="center"><img src="/2019/01/10/5/1.png"></div><h1 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a>修改head.swig</h1><blockquote><p>打开<strong>/themes/next/layout/_partials/head.swig</strong>文件，添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="修改next配置文件"><a href="#修改next配置文件" class="headerlink" title="修改next配置文件"></a>修改next配置文件</h1><blockquote><p>首先去daovoice后台找到自己的app_id，正常刚进入的页面就会显示，或者会提示你点击接入，只需点击接入就可看到，然后在_config.yml文件中添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact</span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 1e963cbc  # app_id</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="聊天窗口配置"><a href="#聊天窗口配置" class="headerlink" title="聊天窗口配置"></a>聊天窗口配置</h1><blockquote><p>进入daovoice后台，点击应用设置，点击聊天设置，开始配置，下面是我的配置参数：</p></blockquote><div align="center"><img src="/2019/01/10/5/2.png"></div><blockquote><p><strong>大功告成，欢迎开撩。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先在&lt;a href=&quot;http://www.daovoice.io/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-Next增加网页标题崩溃特效</title>
    <link href="https://wangc1993.github.io/2019/01/10/4/"/>
    <id>https://wangc1993.github.io/2019/01/10/4/</id>
    <published>2019-01-10T07:43:55.000Z</published>
    <updated>2019-01-10T07:57:18.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<strong>next\source\js\src</strong>文件夹下创建<strong>crash_cheat.js</strong>，添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> var OriginTitle = document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&apos;visibilitychange&apos;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;);</span><br><span class="line">         document.title = &apos;╭(°A°`)╮ 页面崩溃啦 ~&apos;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;);</span><br><span class="line">         document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又好了~&apos; + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(function () &#123;</span><br><span class="line">             document.title = OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>打开<strong>next\layout_layout.swig</strong>，在末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/crash_cheat.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>提示：</strong><br>如果不想改变icon可以将上面的<code>$(&#39;[rel=&quot;icon&quot;]&#39;).attr</code>语句删除。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在&lt;strong&gt;next\source\js\src&lt;/strong&gt;文件夹下创建&lt;strong&gt;crash_cheat.js&lt;/strong&gt;，添加代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-Next页脚增加统计功能</title>
    <link href="https://wangc1993.github.io/2019/01/10/3/"/>
    <id>https://wangc1993.github.io/2019/01/10/3/</id>
    <published>2019-01-10T06:59:38.000Z</published>
    <updated>2019-01-10T07:25:22.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果你使用的主题是NexT，那么你可以很方便的进行不蒜子的访客统计设置，仅仅只需要一步，打开主题的配置文件<strong>/theme/next/_config.yml</strong>，找到如下配置：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: false</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>将enable的值由false改为true，便可以看到页脚出现访问量，上述配置表示：</p><ol><li>site_uv表示是否显示整个网站的UV数</li><li>site_pv表示是否显示整个网站的PV数</li><li>page_pv表示是否显示每个页面的PV数</li></ol></blockquote><blockquote><p>下面是本人的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 访客数</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer: 阅读数</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>注意：</strong>当我们上面的配置都在正确的时候，运行：<code>hexo s</code>，我们会发现footer下面根本没有数字，打开控制台发现，原来<strong>报错404</strong>。</p></blockquote><blockquote><p><strong>原因分析：</strong><br>由于定位到是不蒜子统计功能突然有问题了，所以前往不蒜子官网进行查看，发现官网有一段很重要的提示：“因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！”所以定位到问题，原来是不蒜子使用的七牛的域名被强制过期。需要<strong>把 dn-lbstatics.qbox.me 域名更换为 busuanzi.ibruce.info</strong>。</p></blockquote><blockquote><p><strong>解决方案：</strong><br>打开文件<strong>themes\next\layout_third-party\analytics\busuanzi-counter.swig</strong>：将域名dn-lbstatics.qbox.me改为busuanzi.ibruce.info即可。</p></blockquote><blockquote><p>最后，我们再运行：<code>hexo s</code>，footer出现了统计。不过在本地预览效果的时候，uv数和pv数会过大，这是由于不蒜子用户使用一个存储空间，所以使用localhost:4000进行本地预览的时候会导致数字异常，这是正常现象，只需要将博客部署至云端即可恢复正常。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果你使用的主题是NexT，那么你可以很方便的进行不蒜子的访客统计设置，仅仅只需要一步，打开主题的配置文件&lt;strong&gt;/theme/next/_config.yml&lt;/strong&gt;，找到如下配置：&lt;br&gt;    &lt;figure class=&quot;
      
    
    </summary>
    
      <category term="Hexo-Next配置系列" scheme="https://wangc1993.github.io/categories/Hexo-Next%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>如何使用github发布静态页面</title>
    <link href="https://wangc1993.github.io/2019/01/07/2/"/>
    <id>https://wangc1993.github.io/2019/01/07/2/</id>
    <published>2019-01-07T11:50:57.170Z</published>
    <updated>2019-01-09T08:15:23.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>怎样在github上发布静态页面呢？方法其实很简单，利用gh-pages分支即可实现。下面我将一步步教大家如何操作（首先自己得有一个github账号和git工具）。</p></blockquote><blockquote><ol><li><strong>步骤1：</strong><br> 在需要发布的文件夹对应位置打开命令行： <div align="center"><img src="/2019/01/07/2/1.png"></div></li></ol></blockquote><blockquote><ol start="2"><li><strong>步骤2：</strong><br> 初始化控制仓库：git init，这时文件中会多了一个.git文件： <div align="center"><img src="/2019/01/07/2/2.png"></div><br> <div align="center"><img src="/2019/01/07/2/3.png"></div></li></ol></blockquote><blockquote><ol start="3"><li><strong>步骤3：</strong><br> 将我们需要的文件添加到仓库中：<code>git add --all</code>（全部添加）<br> <div align="center"><img src="/2019/01/07/2/4.png"></div><br> <strong>拓展：</strong>这个警告说明windows里文件的回车换行符和ninux里的不一样。git命令会将换行符统一变成ninux的换行符。</li></ol></blockquote><blockquote><ol start="3"><li><strong>步骤4：</strong><br> 将需要提交的文件commit一下（仅仅提交在本地）： <div align="center"><img src="/2019/01/07/2/5.png"></div></li></ol></blockquote><blockquote><ol start="4"><li><strong>步骤5：</strong><br> 在github上new一个仓库： <div align="center"><img src="/2019/01/07/2/6.png"></div></li></ol></blockquote><blockquote><ol start="5"><li><strong>步骤6：</strong><br> 根据github官网，添加仓库的地址，将本地仓库里的文件push到github上的master（默认分支）中： <div align="center"><img src="/2019/01/07/2/7.png"></div></li></ol></blockquote><blockquote><ol start="6"><li><strong>步骤7：</strong><br> 在远端（remote）创建一个新的分支（branch），固定名gh-pages，本地切换到gh-pages分支，将本地commit提交的东西push到远端的gh-pages分支上： <div align="center"><img src="/2019/01/07/2/8.png"></div><br> <div align="center"><img src="/2019/01/07/2/9.png"></div></li></ol></blockquote><p>这样<a href="https://wangc1993.github.io/wjs/">站点</a>就创建好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;怎样在github上发布静态页面呢？方法其实很简单，利用gh-pages分支即可实现。下面我将一步步教大家如何操作（首先自己得有一个github账号和git工具）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="github" scheme="https://wangc1993.github.io/categories/github/"/>
    
    
  </entry>
  
</feed>
